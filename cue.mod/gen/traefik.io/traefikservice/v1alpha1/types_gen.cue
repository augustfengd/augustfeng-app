// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/traefik/traefik/raw/master/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml

package v1alpha1

import "strings"

// TraefikService is the CRD implementation of a Traefik Service.
// TraefikService object allows to:
// - Apply weight to Services on load-balancing
// - Mirror traffic on services
// More info:
// https://doc.traefik.io/traefik/v3.1/routing/providers/kubernetes-crd/#kind-traefikservice
#TraefikService: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "traefik.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "TraefikService"
	metadata: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// TraefikServiceSpec defines the desired state of a
	// TraefikService.
	spec!: #TraefikServiceSpec
}

// TraefikServiceSpec defines the desired state of a
// TraefikService.
#TraefikServiceSpec: {
	// Mirroring defines the Mirroring service configuration.
	mirroring?: {
		// Healthcheck defines health checks for ExternalName services.
		healthCheck?: {
			// FollowRedirects defines whether redirects should be followed
			// during the health check calls.
			// Default: true
			followRedirects?: bool

			// Headers defines custom headers to be sent to the health check
			// endpoint.
			headers?: {
				[string]: string
			}

			// Hostname defines the value of hostname in the Host header of
			// the health check request.
			hostname?: string

			// Interval defines the frequency of the health check calls.
			// Default: 30s
			interval?: (int | string) & {
				string
			}

			// Method defines the healthcheck method.
			method?: string

			// Mode defines the health check mode.
			// If defined to grpc, will use the gRPC health check protocol to
			// probe the server.
			// Default: http
			mode?: string

			// Path defines the server URL path for the health check endpoint.
			path?: string

			// Port defines the server URL port for the health check endpoint.
			port?: int

			// Scheme replaces the server URL scheme for the health check
			// endpoint.
			scheme?: string

			// Status defines the expected HTTP status code of the response to
			// the health check request.
			status?: int

			// Timeout defines the maximum duration Traefik will wait for a
			// health check request before considering the server unhealthy.
			// Default: 5s
			timeout?: (int | string) & {
				string
			}
		}

		// Kind defines the kind of the Service.
		kind?: "Service" | "TraefikService"

		// MaxBodySize defines the maximum size allowed for the body of
		// the request.
		// If the body is larger, the request is not mirrored.
		// Default value is -1, which means unlimited size.
		maxBodySize?: int

		// Mirrors defines the list of mirrors where Traefik will
		// duplicate the traffic.
		mirrors?: [...{
			// Healthcheck defines health checks for ExternalName services.
			healthCheck?: {
				// FollowRedirects defines whether redirects should be followed
				// during the health check calls.
				// Default: true
				followRedirects?: bool

				// Headers defines custom headers to be sent to the health check
				// endpoint.
				headers?: {
					[string]: string
				}

				// Hostname defines the value of hostname in the Host header of
				// the health check request.
				hostname?: string

				// Interval defines the frequency of the health check calls.
				// Default: 30s
				interval?: (int | string) & {
					string
				}

				// Method defines the healthcheck method.
				method?: string

				// Mode defines the health check mode.
				// If defined to grpc, will use the gRPC health check protocol to
				// probe the server.
				// Default: http
				mode?: string

				// Path defines the server URL path for the health check endpoint.
				path?: string

				// Port defines the server URL port for the health check endpoint.
				port?: int

				// Scheme replaces the server URL scheme for the health check
				// endpoint.
				scheme?: string

				// Status defines the expected HTTP status code of the response to
				// the health check request.
				status?: int

				// Timeout defines the maximum duration Traefik will wait for a
				// health check request before considering the server unhealthy.
				// Default: 5s
				timeout?: (int | string) & {
					string
				}
			}

			// Kind defines the kind of the Service.
			kind?: "Service" | "TraefikService"

			// Name defines the name of the referenced Kubernetes Service or
			// TraefikService.
			// The differentiation between the two is specified in the Kind
			// field.
			name: string

			// Namespace defines the namespace of the referenced Kubernetes
			// Service or TraefikService.
			namespace?: string

			// NativeLB controls, when creating the load-balancer,
			// whether the LB's children are directly the pods IPs or if the
			// only child is the Kubernetes Service clusterIP.
			// The Kubernetes Service itself does load-balance to the pods.
			// By default, NativeLB is false.
			nativeLB?: bool

			// NodePortLB controls, when creating the load-balancer,
			// whether the LB's children are directly the nodes internal IPs
			// using the nodePort when the service type is NodePort.
			// It allows services to be reachable when Traefik runs externally
			// from the Kubernetes cluster but within the same network of the
			// nodes.
			// By default, NodePortLB is false.
			nodePortLB?: bool

			// PassHostHeader defines whether the client Host header is
			// forwarded to the upstream Kubernetes Service.
			// By default, passHostHeader is true.
			passHostHeader?: bool

			// Percent defines the part of the traffic to mirror.
			// Supported values: 0 to 100.
			percent?: int

			// Port defines the port of a Kubernetes Service.
			// This can be a reference to a named port.
			port?: (int | string) & {
				string
			}
			responseForwarding?: {
				// FlushInterval defines the interval, in milliseconds, in between
				// flushes to the client while copying the response body.
				// A negative value means to flush immediately after each write to
				// the client.
				// This configuration is ignored when ReverseProxy recognizes a
				// response as a streaming response;
				// for such responses, writes are flushed to the client
				// immediately.
				// Default: 100ms
				flushInterval?: string
			}

			// Scheme defines the scheme to use for the request to the
			// upstream Kubernetes Service.
			// It defaults to https when Kubernetes Service port is 443, http
			// otherwise.
			scheme?: string

			// ServersTransport defines the name of ServersTransport resource
			// to use.
			// It allows to configure the transport between Traefik and your
			// servers.
			// Can only be used on a Kubernetes Service.
			serversTransport?: string
			sticky?: {
				// Cookie defines the sticky cookie configuration.
				cookie?: {
					// HTTPOnly defines whether the cookie can be accessed by
					// client-side APIs, such as JavaScript.
					httpOnly?: bool

					// MaxAge indicates the number of seconds until the cookie
					// expires.
					// When set to a negative number, the cookie expires immediately.
					// When set to zero, the cookie never expires.
					maxAge?: int

					// Name defines the Cookie name.
					name?: string

					// SameSite defines the same site policy.
					// More info:
					// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
					sameSite?: string

					// Secure defines whether the cookie can only be transmitted over
					// an encrypted connection (i.e. HTTPS).
					secure?: bool
				}
			}

			// Strategy defines the load balancing strategy between the
			// servers.
			// RoundRobin is the only supported value at the moment.
			strategy?: string

			// Weight defines the weight and should only be specified when
			// Name references a TraefikService object
			// (and to be precise, one that embeds a Weighted Round Robin).
			weight?: int
		}]

		// Name defines the name of the referenced Kubernetes Service or
		// TraefikService.
		// The differentiation between the two is specified in the Kind
		// field.
		name: string

		// Namespace defines the namespace of the referenced Kubernetes
		// Service or TraefikService.
		namespace?: string

		// NativeLB controls, when creating the load-balancer,
		// whether the LB's children are directly the pods IPs or if the
		// only child is the Kubernetes Service clusterIP.
		// The Kubernetes Service itself does load-balance to the pods.
		// By default, NativeLB is false.
		nativeLB?: bool

		// NodePortLB controls, when creating the load-balancer,
		// whether the LB's children are directly the nodes internal IPs
		// using the nodePort when the service type is NodePort.
		// It allows services to be reachable when Traefik runs externally
		// from the Kubernetes cluster but within the same network of the
		// nodes.
		// By default, NodePortLB is false.
		nodePortLB?: bool

		// PassHostHeader defines whether the client Host header is
		// forwarded to the upstream Kubernetes Service.
		// By default, passHostHeader is true.
		passHostHeader?: bool

		// Port defines the port of a Kubernetes Service.
		// This can be a reference to a named port.
		port?: (int | string) & {
			string
		}
		responseForwarding?: {
			// FlushInterval defines the interval, in milliseconds, in between
			// flushes to the client while copying the response body.
			// A negative value means to flush immediately after each write to
			// the client.
			// This configuration is ignored when ReverseProxy recognizes a
			// response as a streaming response;
			// for such responses, writes are flushed to the client
			// immediately.
			// Default: 100ms
			flushInterval?: string
		}

		// Scheme defines the scheme to use for the request to the
		// upstream Kubernetes Service.
		// It defaults to https when Kubernetes Service port is 443, http
		// otherwise.
		scheme?: string

		// ServersTransport defines the name of ServersTransport resource
		// to use.
		// It allows to configure the transport between Traefik and your
		// servers.
		// Can only be used on a Kubernetes Service.
		serversTransport?: string
		sticky?: {
			// Cookie defines the sticky cookie configuration.
			cookie?: {
				// HTTPOnly defines whether the cookie can be accessed by
				// client-side APIs, such as JavaScript.
				httpOnly?: bool

				// MaxAge indicates the number of seconds until the cookie
				// expires.
				// When set to a negative number, the cookie expires immediately.
				// When set to zero, the cookie never expires.
				maxAge?: int

				// Name defines the Cookie name.
				name?: string

				// SameSite defines the same site policy.
				// More info:
				// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
				sameSite?: string

				// Secure defines whether the cookie can only be transmitted over
				// an encrypted connection (i.e. HTTPS).
				secure?: bool
			}
		}

		// Strategy defines the load balancing strategy between the
		// servers.
		// RoundRobin is the only supported value at the moment.
		strategy?: string

		// Weight defines the weight and should only be specified when
		// Name references a TraefikService object
		// (and to be precise, one that embeds a Weighted Round Robin).
		weight?: int
	}

	// Weighted defines the Weighted Round Robin configuration.
	weighted?: {
		// Services defines the list of Kubernetes Service and/or
		// TraefikService to load-balance, with weight.
		services?: [...{
			// Healthcheck defines health checks for ExternalName services.
			healthCheck?: {
				// FollowRedirects defines whether redirects should be followed
				// during the health check calls.
				// Default: true
				followRedirects?: bool

				// Headers defines custom headers to be sent to the health check
				// endpoint.
				headers?: {
					[string]: string
				}

				// Hostname defines the value of hostname in the Host header of
				// the health check request.
				hostname?: string

				// Interval defines the frequency of the health check calls.
				// Default: 30s
				interval?: (int | string) & {
					string
				}

				// Method defines the healthcheck method.
				method?: string

				// Mode defines the health check mode.
				// If defined to grpc, will use the gRPC health check protocol to
				// probe the server.
				// Default: http
				mode?: string

				// Path defines the server URL path for the health check endpoint.
				path?: string

				// Port defines the server URL port for the health check endpoint.
				port?: int

				// Scheme replaces the server URL scheme for the health check
				// endpoint.
				scheme?: string

				// Status defines the expected HTTP status code of the response to
				// the health check request.
				status?: int

				// Timeout defines the maximum duration Traefik will wait for a
				// health check request before considering the server unhealthy.
				// Default: 5s
				timeout?: (int | string) & {
					string
				}
			}

			// Kind defines the kind of the Service.
			kind?: "Service" | "TraefikService"

			// Name defines the name of the referenced Kubernetes Service or
			// TraefikService.
			// The differentiation between the two is specified in the Kind
			// field.
			name: string

			// Namespace defines the namespace of the referenced Kubernetes
			// Service or TraefikService.
			namespace?: string

			// NativeLB controls, when creating the load-balancer,
			// whether the LB's children are directly the pods IPs or if the
			// only child is the Kubernetes Service clusterIP.
			// The Kubernetes Service itself does load-balance to the pods.
			// By default, NativeLB is false.
			nativeLB?: bool

			// NodePortLB controls, when creating the load-balancer,
			// whether the LB's children are directly the nodes internal IPs
			// using the nodePort when the service type is NodePort.
			// It allows services to be reachable when Traefik runs externally
			// from the Kubernetes cluster but within the same network of the
			// nodes.
			// By default, NodePortLB is false.
			nodePortLB?: bool

			// PassHostHeader defines whether the client Host header is
			// forwarded to the upstream Kubernetes Service.
			// By default, passHostHeader is true.
			passHostHeader?: bool

			// Port defines the port of a Kubernetes Service.
			// This can be a reference to a named port.
			port?: (int | string) & {
				string
			}
			responseForwarding?: {
				// FlushInterval defines the interval, in milliseconds, in between
				// flushes to the client while copying the response body.
				// A negative value means to flush immediately after each write to
				// the client.
				// This configuration is ignored when ReverseProxy recognizes a
				// response as a streaming response;
				// for such responses, writes are flushed to the client
				// immediately.
				// Default: 100ms
				flushInterval?: string
			}

			// Scheme defines the scheme to use for the request to the
			// upstream Kubernetes Service.
			// It defaults to https when Kubernetes Service port is 443, http
			// otherwise.
			scheme?: string

			// ServersTransport defines the name of ServersTransport resource
			// to use.
			// It allows to configure the transport between Traefik and your
			// servers.
			// Can only be used on a Kubernetes Service.
			serversTransport?: string
			sticky?: {
				// Cookie defines the sticky cookie configuration.
				cookie?: {
					// HTTPOnly defines whether the cookie can be accessed by
					// client-side APIs, such as JavaScript.
					httpOnly?: bool

					// MaxAge indicates the number of seconds until the cookie
					// expires.
					// When set to a negative number, the cookie expires immediately.
					// When set to zero, the cookie never expires.
					maxAge?: int

					// Name defines the Cookie name.
					name?: string

					// SameSite defines the same site policy.
					// More info:
					// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
					sameSite?: string

					// Secure defines whether the cookie can only be transmitted over
					// an encrypted connection (i.e. HTTPS).
					secure?: bool
				}
			}

			// Strategy defines the load balancing strategy between the
			// servers.
			// RoundRobin is the only supported value at the moment.
			strategy?: string

			// Weight defines the weight and should only be specified when
			// Name references a TraefikService object
			// (and to be precise, one that embeds a Weighted Round Robin).
			weight?: int
		}]
		sticky?: {
			// Cookie defines the sticky cookie configuration.
			cookie?: {
				// HTTPOnly defines whether the cookie can be accessed by
				// client-side APIs, such as JavaScript.
				httpOnly?: bool

				// MaxAge indicates the number of seconds until the cookie
				// expires.
				// When set to a negative number, the cookie expires immediately.
				// When set to zero, the cookie never expires.
				maxAge?: int

				// Name defines the Cookie name.
				name?: string

				// SameSite defines the same site policy.
				// More info:
				// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
				sameSite?: string

				// Secure defines whether the cookie can only be transmitted over
				// an encrypted connection (i.e. HTTPS).
				secure?: bool
			}
		}
	}
}
