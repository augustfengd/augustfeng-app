#+title: Rust code organization
#+categories: programming
#+mermaid: true
#+date: [2023-12-31 Sun]
#+draft: true

* About

I've read the [[https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html][Managing Growing Projects with Packages, Crates and Modules]] from
the rust book a dozen times now but I always forget the details of it.

Hopefully building a diagram will connect me to this group of rust-enabled
neurons faster.

* Diagram

{{<mermaid>}}
graph TD
    subgraph package

    subgraph crate

    subgraph file/module ["file/module"]

    crate_root_file("`_src/main.rs_ or _src/lib.rs_`")

    end

    subgraph file'/module ["file/module"]
    _("...")
    end

    subgraph file''/module ["file/module"]

    submodule
    submodule'
    submodule''

    end

    file/module --> file'/module
    file/module --> submodule
    file/module --> submodule'
    file/module --> submodule''

    end

    subgraph crate'
    _'("...")
    end

    subgraph crate''
    _''("...")
    end
    end
{{</mermaid>}}

* Targets

The chapter does not cover [[https://doc.rust-lang.org/cargo/reference/cargo-targets.html][targets]], but I think it was used interchangeably with
the crate concept in [[https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html][section 7.1]] when it's mentioned that binary and library
crates share the same name.

I ran a small experiment with with both /src/main.rs/ and /src/lib.rs/ to see if
the crates could reference each other using the same crate name. Only the binary
crate could reference the library crate by the package name.

It would make sense that the documentation meant the /name/ field in targets,
considering how closely they are related.

#+begin_quote
Cargo packages consist of targets which correspond to source files which can be
compiled into a crate.
#+end_quote
