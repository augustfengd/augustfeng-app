// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/traefik/traefik/raw/master/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml

package v1alpha1

import "strings"

// IngressRouteUDP is a CRD implementation of a Traefik UDP
// Router.
#IngressRouteUDP: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "traefik.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "IngressRouteUDP"
	metadata: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// IngressRouteUDPSpec defines the desired state of a
	// IngressRouteUDP.
	spec!: #IngressRouteUDPSpec
}

// IngressRouteUDPSpec defines the desired state of a
// IngressRouteUDP.
#IngressRouteUDPSpec: {
	// EntryPoints defines the list of entry point names to bind to.
	// Entry points have to be configured in the static configuration.
	// More info:
	// https://doc.traefik.io/traefik/v3.1/routing/entrypoints/
	// Default: all.
	entryPoints?: [...string]

	// Routes defines the list of routes.
	routes: [...{
		// Services defines the list of UDP services.
		services?: [...{
			// Name defines the name of the referenced Kubernetes Service.
			name: string

			// Namespace defines the namespace of the referenced Kubernetes
			// Service.
			namespace?: string

			// NativeLB controls, when creating the load-balancer,
			// whether the LB's children are directly the pods IPs or if the
			// only child is the Kubernetes Service clusterIP.
			// The Kubernetes Service itself does load-balance to the pods.
			// By default, NativeLB is false.
			nativeLB?: bool

			// NodePortLB controls, when creating the load-balancer,
			// whether the LB's children are directly the nodes internal IPs
			// using the nodePort when the service type is NodePort.
			// It allows services to be reachable when Traefik runs externally
			// from the Kubernetes cluster but within the same network of the
			// nodes.
			// By default, NodePortLB is false.
			nodePortLB?: bool

			// Port defines the port of a Kubernetes Service.
			// This can be a reference to a named port.
			port: (int | string) & {
				string
			}

			// Weight defines the weight used when balancing requests between
			// multiple Kubernetes Service.
			weight?: int
		}]
	}]
}
