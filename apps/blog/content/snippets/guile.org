#+TITLE: Guile

* let
** named let (iteration)

#+begin_src scheme :results output
  (let foobar ((s "helloworld"))
    (unless (string-null? s)
      (display (string-take s 1))
      (foobar (string-drop s 1))))
#+end_src

* cond

#+begin_src scheme
  (cond (#t (lambda (v) (eq? v #t)) =>
            (lambda (x) x))
        (#f (lambda (v) (eq? v #f)) =>
            (lambda (x) x)))
#+end_src

* apply

#+begin_src scheme
  (apply (lambda (v) (+ v 1)) '(0))
#+end_src

#+begin_src scheme
  (apply (lambda (f) (f 1)) (lambda (v) v) '())
#+end_src

* call/cc

#+begin_src scheme :results output
  ;; learning resource
  ;;
  ;; https://ds26gte.github.io/tyscheme/index-Z-H-15.html
  (define foobar (string-append "hello" (call/cc
                                         (lambda (cc)
                                           (display "foo\n") ;; this is evaluated.

                                           ;; this is evaluated as well.
                                           (string-append
                                            "dear"
                                            ;; but only the expression containing 'cc is returned.
                                            (cc "world"))

                                           ;; this is not evaluated.
                                           (display "bar\n")))))
  (display foobar)
#+end_src

#+RESULTS:
: foo
: helloworld
