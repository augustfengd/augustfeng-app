// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/traefik/traefik/raw/master/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml

package v1alpha1

import "strings"

// ServersTransport is the CRD implementation of a
// ServersTransport.
// If no serversTransport is specified, the default@internal will
// be used.
// The default@internal serversTransport is created from the
// static configuration.
// More info:
// https://doc.traefik.io/traefik/v3.1/routing/services/#serverstransport_1
#ServersTransport: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "traefik.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "ServersTransport"
	metadata: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// ServersTransportSpec defines the desired state of a
	// ServersTransport.
	spec!: #ServersTransportSpec
}

// ServersTransportSpec defines the desired state of a
// ServersTransport.
#ServersTransportSpec: {
	// CertificatesSecrets defines a list of secret storing client
	// certificates for mTLS.
	certificatesSecrets?: [...string]

	// DisableHTTP2 disables HTTP/2 for connections with backend
	// servers.
	disableHTTP2?: bool

	// ForwardingTimeouts defines the timeouts for requests forwarded
	// to the backend servers.
	forwardingTimeouts?: {
		// DialTimeout is the amount of time to wait until a connection to
		// a backend server can be established.
		dialTimeout?: (int | string) & {
			string
		}

		// IdleConnTimeout is the maximum period for which an idle HTTP
		// keep-alive connection will remain open before closing itself.
		idleConnTimeout?: (int | string) & {
			string
		}

		// PingTimeout is the timeout after which the HTTP/2 connection
		// will be closed if a response to ping is not received.
		pingTimeout?: (int | string) & {
			string
		}

		// ReadIdleTimeout is the timeout after which a health check using
		// ping frame will be carried out if no frame is received on the
		// HTTP/2 connection.
		readIdleTimeout?: (int | string) & {
			string
		}

		// ResponseHeaderTimeout is the amount of time to wait for a
		// server's response headers after fully writing the request
		// (including its body, if any).
		responseHeaderTimeout?: (int | string) & {
			string
		}
	}

	// InsecureSkipVerify disables SSL certificate verification.
	insecureSkipVerify?: bool

	// MaxIdleConnsPerHost controls the maximum idle (keep-alive) to
	// keep per-host.
	maxIdleConnsPerHost?: int

	// PeerCertURI defines the peer cert URI used to match against SAN
	// URI during the peer certificate verification.
	peerCertURI?: string

	// RootCAsSecrets defines a list of CA secret used to validate
	// self-signed certificate.
	rootCAsSecrets?: [...string]

	// ServerName defines the server name used to contact the server.
	serverName?: string

	// Spiffe defines the SPIFFE configuration.
	spiffe?: {
		// IDs defines the allowed SPIFFE IDs (takes precedence over the
		// SPIFFE TrustDomain).
		ids?: [...string]

		// TrustDomain defines the allowed SPIFFE trust domain.
		trustDomain?: string
	}
}
